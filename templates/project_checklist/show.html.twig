{% extends 'base.html.twig' %}

{% block title %}{{ project_checklist.name }}{% endblock %}

{% block body %}
    <div class="container mx-auto px-4 py-8 max-w-4xl">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold text-gray-800">{{ project_checklist.name }}</h1>
            <div class="flex space-x-2">
                <a href="{{ path('app_project_checklist_index') }}" 
                   class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    Retour
                </a>
                <a href="{{ path('app_project_checklist_edit', {'id': project_checklist.id}) }}" 
                   class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                    Modifier
                </a>
            </div>
        </div>
        
        <!-- Informations de la checklist -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                    <p class="text-sm text-gray-500 mb-1">Client</p>
                    <p class="font-medium text-gray-900">{{ project_checklist.client }}</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500 mb-1">Date de création</p>
                    <p class="font-medium text-gray-900">{{ project_checklist.createdAt ? project_checklist.createdAt|date('d/m/Y H:i') : 'Non spécifiée' }}</p>
                </div>
                <div>
                    <p class="text-sm text-gray-500 mb-1">Créé par</p>
                    <p class="font-medium text-gray-900">{{ project_checklist.username ?: 'Non spécifié' }}</p>
                </div>
            </div>
        </div>
        
        <!-- Progression -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <h2 class="text-lg font-medium text-gray-900 mb-4">Progression</h2>
            
            {% set total = project_checklist.projectChecklistItems|length %}
            {% set completed = project_checklist.projectChecklistItems|filter(item => item.isChecked)|length %}
            {% set percent = total > 0 ? (completed / total * 100)|round : 0 %}
            
            <div class="flex justify-between mb-2">
                <span class="text-sm font-medium text-gray-700">{{ completed }}/{{ total }} éléments complétés</span>
                <span class="text-sm font-medium text-gray-700">{{ percent }}%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5">
                <div class="bg-blue-600 h-2.5 rounded-full" style="width: {{ percent }}%"></div>
            </div>
        </div>
        
        <!-- Éléments de la checklist -->
        <div class="bg-white rounded-lg shadow-sm overflow-hidden mb-6">
            <div class="p-6 border-b border-gray-200 flex justify-between items-center">
                <h2 class="text-lg font-medium text-gray-900">Éléments de la checklist</h2>
                <a href="{{ path('app_project_checklist_item_new') }}?checklist={{ project_checklist.id }}" 
                   class="inline-flex items-center px-3 py-1.5 border border-transparent rounded-md text-sm font-medium text-white bg-green-600 hover:bg-green-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    Ajouter
                </a>
            </div>
            
            {% if project_checklist.projectChecklistItems|length > 0 %}
                <ul class="divide-y divide-gray-200">
                    {% for item in project_checklist.projectChecklistItems %}
                        <li class="p-4 flex items-start">
                            <div class="flex-shrink-0 pt-1">
                                <div class="relative inline-block w-10 mr-2 align-middle select-none">
                                    <input type="checkbox" 
                                           id="item-{{ item.id }}" 
                                           data-item-id="{{ item.id }}" 
                                           class="sr-only toggle-checkbox" 
                                           {% if item.isChecked %}checked{% endif %} 
                                           onchange="updateChecklistItem(this)">
                                    <label for="item-{{ item.id }}" 
                                           class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 cursor-pointer 
                                                 {% if item.isChecked %}bg-green-500{% endif %}">
                                    </label>
                                </div>
                            </div>
                            <div class="ml-3 flex-1">
                                <span class="block text-sm font-medium {% if item.isChecked %}line-through text-gray-400{% else %}text-gray-700{% endif %}">
                                    {{ item.label }}
                                </span>
                                <div class="mt-1 text-xs text-gray-500">Position: {{ item.position }}</div>
                            </div>
                            <div class="flex-shrink-0 flex space-x-2">
                                <a href="{{ path('app_project_checklist_item_edit', {'id': item.id}) }}" 
                                   class="text-blue-600 hover:text-blue-800">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                    </svg>
                                </a>
                                <form method="post" action="{{ path('app_project_checklist_item_delete', {'id': item.id}) }}" 
                                      onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cet élément ?');" 
                                      class="inline">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ item.id) }}">
                                    <button type="submit" class="text-red-600 hover:text-red-800 bg-transparent border-0 p-0">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                    </button>
                                </form>
                            </div>
                        </li>
                    {% endfor %}
                </ul>
            {% else %}
                <div class="py-12 text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun élément</h3>
                    <p class="mt-1 text-sm text-gray-500">Commencez par ajouter des éléments à votre checklist.</p>
                    <div class="mt-6">
                        <a href="{{ path('app_project_checklist_item_new') }}" 
                           class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                            </svg>
                            Ajouter un élément
                        </a>
                    </div>
                </div>
            {% endif %}
        </div>

        <!-- Message d'information -->
        <div class="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6 rounded">
            <div class="flex">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-blue-700">
                        Utilisez les interrupteurs pour marquer les tâches comme complétées. Les modifications sont enregistrées automatiquement.
                    </p>
                </div>
            </div>
        </div>

        <!-- Actions -->
        <div class="flex justify-between">
            <div></div>
            {{ include('project_checklist/_delete_form.html.twig') }}
        </div>
    </div>

    <style>
        .toggle-label {
            transition: background-color 0.2s ease;
        }
        .toggle-label:after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transition: 0.2s;
            box-shadow: 0 0 2px rgba(0,0,0,0.2);
        }
        .toggle-checkbox:checked + .toggle-label:after {
            left: calc(100% - 2px);
            transform: translateX(-100%);
        }
    </style>

    <script>
        function updateChecklistItem(checkbox) {
            const itemId = checkbox.dataset.itemId;
            const isChecked = checkbox.checked;
            
            // Désactiver temporairement le switch pendant la requête
            checkbox.disabled = true;
            
            // Mettre à jour visuellement le switch
            const label = checkbox.nextElementSibling;
            if (isChecked) {
                label.classList.add('bg-green-500');
            } else {
                label.classList.remove('bg-green-500');
            }
            
            // Mettre à jour visuellement le texte
            const textElement = checkbox.closest('li').querySelector('.flex-1 span');
            if (isChecked) {
                textElement.classList.add('line-through', 'text-gray-400');
                textElement.classList.remove('text-gray-700');
            } else {
                textElement.classList.remove('line-through', 'text-gray-400');
                textElement.classList.add('text-gray-700');
            }
            
            // Envoyer la requête AJAX
            fetch(`/project/checklist/item/${itemId}/toggle`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur réseau');
                }
                return response.json();
            })
            .then(data => {
                // Réactiver le switch
                checkbox.disabled = false;
                
                // Mettre à jour la barre de progression avec les données du serveur
                updateProgressBar(data.progress);
                
                // Afficher un message de succès
                showSuccessMessage();
            })
            .catch(error => {
                console.error('Erreur:', error);
                
                // Réactiver le switch et restaurer son état précédent
                checkbox.disabled = false;
                checkbox.checked = !isChecked;
                
                // Restaurer l'apparence visuelle
                if (!isChecked) {
                    label.classList.remove('bg-green-500');
                    textElement.classList.remove('line-through', 'text-gray-400');
                    textElement.classList.add('text-gray-700');
                } else {
                    label.classList.add('bg-green-500');
                    textElement.classList.add('line-through', 'text-gray-400');
                    textElement.classList.remove('text-gray-700');
                }
                
                // Afficher un message d'erreur
                showErrorMessage();
            });
        }
        
        function updateProgressBar(progress) {
            // Mettre à jour le texte de progression
            const progressText = document.querySelector('.flex.justify-between.mb-2');
            if (progressText) {
                progressText.innerHTML = `
                    <span class="text-sm font-medium text-gray-700">${progress.completed}/${progress.total} éléments complétés</span>
                    <span class="text-sm font-medium text-gray-700">${progress.percent}%</span>
                `;
            }
            
            // Mettre à jour la barre de progression
            const progressBar = document.querySelector('.bg-blue-600');
            if (progressBar) {
                progressBar.style.width = `${progress.percent}%`;
            }
        }
        
        function showSuccessMessage() {
            // Supprimer toute notification existante
            const existingMessages = document.querySelectorAll('.success-notification');
            existingMessages.forEach(msg => msg.remove());
            
            const message = document.createElement('div');
            message.className = 'success-notification fixed bottom-4 right-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg shadow-lg z-50 flex items-center space-x-3 animate-fade-in';
            message.innerHTML = `
                <div class="flex items-center">
                    <div class="flex-shrink-0 mr-3">
                        <svg class="h-6 w-6 text-green-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div>
                        <p class="font-bold text-green-800">Succès!</p>
                        <p class="text-sm">Tâche mise à jour avec succès</p>
                    </div>
                </div>
                <button type="button" class="ml-6 text-green-600 hover:text-green-800 focus:outline-none" onclick="this.parentElement.remove()">
                    <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            `;
            document.body.appendChild(message);
            
            // Ajouter une animation d'entrée
            setTimeout(() => {
                message.classList.add('opacity-100');
            }, 10);
            
            // Supprimer le message après 3 secondes
            setTimeout(() => {
                message.classList.add('opacity-0');
                setTimeout(() => {
                    message.remove();
                }, 300);
            }, 3000);
        }
        
        function showErrorMessage() {
            const message = document.createElement('div');
            message.className = 'fixed bottom-4 right-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-md z-50';
            message.innerHTML = `
                <div class="flex">
                    <div class="py-1"><svg class="h-6 w-6 text-red-500 mr-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg></div>
                    <div>
                        <p class="font-bold">Erreur</p>
                        <p class="text-sm">Une erreur est survenue. Veuillez réessayer.</p>
                    </div>
                </div>
            `;
            document.body.appendChild(message);
            
            // Supprimer le message après 5 secondes
            setTimeout(() => {
                message.remove();
            }, 5000);
        }
    </script>
    
    <style>
        .toggle-label {
            transition: background-color 0.2s ease;
        }
        .toggle-label:after {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transition: 0.2s;
            box-shadow: 0 0 2px rgba(0,0,0,0.2);
        }
        .toggle-checkbox:checked + .toggle-label:after {
            left: calc(100% - 2px);
            transform: translateX(-100%);
        }
        
        .success-notification {
            opacity: 0;
            transition: opacity 0.3s ease, transform 0.3s ease;
            min-width: 300px;
        }
        
        .opacity-0 {
            opacity: 0;
        }
        
        .opacity-100 {
            opacity: 1;
        }
        
        .animate-fade-in {
            animation: slideIn 0.3s ease-in-out forwards;
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(20px); }
            to { opacity: 1; transform: translateX(0); }
        }
    </style>
{% endblock %}
